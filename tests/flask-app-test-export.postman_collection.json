{
	"info": {
		"_postman_id": "a5121621-ecab-4c92-ade1-31971573bae4",
		"name": "flask-app-test-export",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f02149c-1c14-4bee-8a55-2b043f2ad96c",
						"exec": [
							"postman.clearEnvironmentVariable(\"access_token\")",
							"",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"User was created\"] = jsonData.username && jsonData.id",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"nilo\",\n    \"password\": \"avocado\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c08f0b6-3d6d-43f5-ade6-5082102599d4",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Response body has access_token\"] = responseBody.has(\"access_token\")",
							"tests[\"Response time is less than 150ms\"] = responseTime < 150;",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
							"",
							"postman.setEnvironmentVariable(\"store_name\", \"store_1\");",
							"postman.setEnvironmentVariable(\"item_name\", \"item_1\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"nilo\",\n    \"password\": \"avocado\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd557249-8148-47cf-b1d1-83347eacf372",
						"exec": [
							"tests[\"Sucessfull POST request\"] = responseCode.code === 201;",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\"",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Store name is returned\"] = jsonData.name === environment.store_name;",
							"tests[\"Store id is returned\"] = jsonData.id > 0 ;",
							"tests[\"Store items are and empty list\"] = jsonData.items.length === 0;",
							"",
							"postman.setEnvironmentVariable(\"store_id\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": {{store_name}},\n    \"items\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/store/{{store_name}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"{{store_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b170b76c-5ff0-446f-8ef7-ddc1a37b7410",
						"exec": [
							"tests[\"Sucessfull POST request\"] = responseCode.code === 201;",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\"",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Item name is returned\"] = jsonData.name === environment.item_name;",
							"tests[\"Item price is returned\"] = jsonData.price === 299.98;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": 299.98,\n    \"name\": \"{{item_name}}\",\n    \"store_id\": \"{{store_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/item/{{item_name}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"{{item_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/stores",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e07b097-dd17-40d3-b207-1b1a3c3e209b",
						"exec": [
							"tests[\"Sucessfull POST request\"] = responseCode.code === 200;",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\"",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Store name is returned\"] = jsonData.stores[0].name === environment.store_name;",
							"tests[\"Store id is returned\"] = jsonData.stores[0].id === parseInt(environment.store_id);",
							"tests[\"Store items name are present\"] = jsonData.stores[0].items[0].name = \"joao\";",
							"tests[\"Store items price are present\"] = jsonData.stores[0].items[0].name = 299.98;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/stores",
					"host": [
						"{{url}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6f59ed51-5b2d-4676-991c-c486f7681666",
						"exec": [
							"tests[\"Sucessfull POST request\"] = responseCode.code === 200;",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\"",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Message is deleted\"] = jsonData.message === \"Item deleted\";"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/{{item_name}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"{{item_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d610586-7af6-4ac9-9c69-9b320d7d2c6a",
						"exec": [
							"tests[\"Sucessfull POST request\"] = responseCode.code === 200;",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\")",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\"",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Message is deleted\"] = jsonData.message === \"Store deleted\";"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{url}}/store/{{store_name}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"{{store_name}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}